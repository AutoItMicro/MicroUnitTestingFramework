{
  "name":"Micro Unit Testing Framework",
  "tagline":"Micro Unit Testing Framework is an Object based unit testing framework for AutoIt.",
  "body":"Micro - The AutoIt Unit Testing Framework\r\n\=========================================\r\n\r\n[![Build status](https://img.shields.io/appveyor/ci/KyleChamberlin/microunittestingframework.svg?style=flat-square)](https://ci.appveyor.com/project/KyleChamberlin/microunittestingframework)\r\n[![Open Issues](https://img.shields.io/github/issues/AutoItMicro/MicroUnitTestingFramework.svg?style=flat-square)](http://waffle.io/AutoItMicro/MicroUnitTestingFramework)\r\n\r\nMicro is a xUnit style testing framework design for use with AutoIt. The goal of Micro is to be\r\n\easy to use and simple to integrate with continuous integration services.\r\n\r\nWe all write scripts and programs to make our lives easier; and they do make our lives easier, \r\nright up until it becomes something others rely on or it becomes something your business needs. \r\n\r\nThis is where unit testing can really save you. Micro provides a simple assert based system for \r\ntesting the fixtures of your code. The best part is that you will know when a change breaks \r\nanother part of your script or program unexpectedly, and not after you ship it to a client who \r\ncan't use it. \r\n\r\nUsing Micro\r\n-----------\r\n\r\nTo use micro you simply need to add it as a submodule to the project you'd like to test.\r\n\r\n    cd <project you would like to test's root>\r\n    git submodule add git://github.com/AutoItMicro/MicroUnitTestingFramework.git micro\r\n    git submodule update --init --recursive\r\n\r\nnow if you add micro/micro.au3 as an include in your test script you are good to go.\r\n\r\n### Writing Tests\r\n\r\nTo begin using Micro to test you just need to write your first test. We suggest writing a function for each test like this:\r\n\r\nMyTests.au3:\r\n```AutoIt\r\n#include <micro/micro.au3>\r\n#include <myScriptToTest.au3>\r\n\r\nFunc myFunctionTest()\r\n	$test = newTest("myFunction performs like this")\r\n	$test.assertEquals('myFunction($someInput) returns "This"', myFunction($someInput), "This")\r\n	Return $test\r\nEndFunc\r\n```\r\n\r\nNow we need a testSuite for this test, so let's make one and add this test to it.\r\n\r\nMyTests.au3:\r\n```AutoIt\r\n$testSuite = newTestSuite("My awesome test suite")\r\n$testSuite.addTest(myFunctionTest())\r\n$testSuite.finish()\r\n```\r\n",
  "google":"",  "note":"Don't delete this file! It's used internally to help with page regeneration."}
